###############################################################################
## GMusicTagger Project
##
## Copyright (C) 2011 Guillermo Guerrero g.guerrero.bus@gmail.com
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
##
## Python module ui/settings.py
## Autogenerated from ui/glade/settings.glade
## Generated on Mon Dec 20 01:09:18 2010
##
## Warning: Do not modify any context comment such as #--
## They are required to keep user's code
###############################################################################

import os
import logging
import copy
import time
import subprocess

import pygtk
pygtk.require('2.0')
import gtk

from SimpleGladeApp import SimpleGladeApp

import core.env as env
from core.env import _
import core.preferences as preferences

import ui.message as message

# Sets logger
APPLOG = logging.getLogger(__name__)

class AboutdialogGmusictagger(SimpleGladeApp):
    """ About dialog for GMusicTagger """
    
    def __init__(self, path="ui/glade/settings.glade",
                 root="aboutdialog_gmusictagger",
                 domain=env.APP_NAME,
                 **kwargs):
        """ Intialize the Glade Files and the extra Widget.
        Also initialize the log, the core helpers and the text domain """        
        SimpleGladeApp.__init__(self, path, root, domain, **kwargs)
        
        # Icon Images
        self.aboutdialog_gmusictagger.set_icon_from_file(env.ICON_GMUSICTAGGER)
        self.aboutdialog_gmusictagger.set_logo(env.GMUSICTAGGER_BUF)

    def show(self):
        APPLOG.debug("Show about dialog interface")
        self.aboutdialog_gmusictagger.show()        
    
    def on_aboutdialog_gmusictagger_close(self, widget, *args):
        APPLOG.debug("Hide about dialog interface")
        self.aboutdialog_gmusictagger.hide()

    def on_aboutdialog_gmusictagger_response(self, widget, *args):
        APPLOG.debug("Hide about dialog interface")
        self.aboutdialog_gmusictagger.hide()
        
    def on_aboutdialog_gmusictagger_delete_event(self, widget, *args):
        return True


class DialogSettings(SimpleGladeApp):
    """ Settings dialog for GMusicTagger """
    
    def __init__(self, path="ui/glade/settings.glade",
                 root="dialog_settings",
                 domain=env.APP_NAME,
                 **kwargs):
        """ Intialize the Glade Files and the extra Widget.
        Also initialize the log, the core helpers and the text domain """        
        SimpleGladeApp.__init__(self, path, root, domain, **kwargs)        
        
        # Icons images
        self.dialog_settings.set_icon_from_file(env.ICON_GMUSICTAGGER)
        self.image_general_settings.set_from_pixbuf(env.GENERAL_SETTINGS_BUF32)
        self.image_music_settings.set_from_pixbuf(env.MUSIC_SETTINGS_BUF32)
        self.image_apic_settings.set_from_pixbuf(env.APIC_SETTINGS_BUF32)
        self.image_default_FILE.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TRCK.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TIT2.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TPE1.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TPE2.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TPE3.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TPE4.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TCOM.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TALB.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TYER.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TCON.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_COMM.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_TIME.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_BITRATE.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_PATH.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_music_path.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_test_music_player_program.set_from_pixbuf(env.PLAY_BUF16)
        self.image_default_music_player_program.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)
        self.image_default_apic_path.set_from_pixbuf(env.DEFAULT_SETTINGS_BUF16)

        
        # Set dialog response
        self.set_dialog_response()
        
        # Set about dialog        
        self.aboutdialog = AboutdialogGmusictagger()


    ###########################################################################
    ## Miscellaneous methods
    def set_dialog_response(self):
        self.dialog_settings.add_buttons(gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL,
                                         gtk.STOCK_OK, gtk.RESPONSE_ACCEPT,
                                         gtk.STOCK_ABOUT, gtk.RESPONSE_HELP)

        self.dialog_settings.set_alternative_button_order([gtk.RESPONSE_ACCEPT,
                                                           gtk.RESPONSE_CANCEL,
                                                           gtk.RESPONSE_HELP])  
 
    def show(self):
        self.dialog_settings.show()

    def run(self):
        APPLOG.debug("Run settings dialog interface")
        
        response = self.dialog_settings.run()        
        if response == gtk.RESPONSE_ACCEPT:
            APPLOG.debug("gtk.RESPONSE_ACCEPT emited")
            APPLOG.info("Updating config data to return")
            self.__update_config()
        elif response == gtk.RESPONSE_CANCEL:
            APPLOG.debug("gtk.RESPONSE_CANCEL emited")
            APPLOG.info("Closing the setting dialog")
        elif response == gtk.RESPONSE_DELETE_EVENT:
            APPLOG.debug("gtk.RESPONSE_DELETE_EVENT emited")  
            APPLOG.info("Closing the setting dialog")
        elif response == gtk.RESPONSE_HELP:
            self.aboutdialog.show()        
        
        self.dialog_settings.hide()     
        return self.config        
                
    def on_dialog_settings_delete_event(self, dialog, event):
        """ Do not destroy the dialog, just hide """
        return True

    def on_btn_test_music_player_program_clicked (self, btn_test_music_player_program):
        """
        """
        play_command = self.entry_music_player_program.get_text()
        
        process = subprocess.Popen(play_command,
                                   shell = True,
                                   stdout = subprocess.PIPE,
                                   stderr = subprocess.PIPE)
                                   
        # Wait a bit to kwnon if the process failed inmediatily
        time.sleep(0.2)
        returncode = process.poll()
        title = _("Music player test")
        if returncode:
            error_message = _("Cannot open music player:\n\n")
            stdout = ''.join(process.stdout.readlines()).replace("&","&amp;")
            stderr = ''.join(process.stderr.readlines()).replace("&","&amp;")
            error_message = "%s%s%s" % (error_message, stdout, stderr)
            message.error(title, error_message, self.dialog_settings)
        else:
            ok_message = _("The player '%s' works!") % play_command 
            message.info(title, ok_message, self.dialog_settings)
            
    ###########################################################################

    ###########################################################################
    ## Configuration methods
    def set_config(self,d):
        """ Ensure a deep copy of the config dictionary to be able to compare
        this object after being manipulated inside this class """
        self.config = copy.deepcopy(d)
        self.__set_config()
        
    def __set_config(self):              
        """ Represents all the config values in the settings dialog """
        
        # Mp3 Tree
        self.cbtn_mp3_tree_select_track_when_added.set_active(self.config['misc']['auto-select-when-added'])
        self.cbtn_mp3_tree_show_notifications.set_active(self.config['misc']['show-notifications'])
                
        # Each column Id has [visible,background and foreground]
        for col_id in env.COLUMN_IDS:
            try:
                check_button = self.get_widget('cbtn_column_' + col_id)
                background = self.get_widget('colorbtn_background_' + col_id)
                foreground = self.get_widget('colorbtn_foreground_' + col_id)
            
                check_button.set_active(self.config[col_id]['visible'])
                background_color = gtk.gdk.color_parse(self.config[col_id]['background'])
                foreground_color = gtk.gdk.color_parse(self.config[col_id]['foreground'])
                background.set_color(background_color)
                foreground.set_color(foreground_color)                        
            except:
                APPLOG.exception("Cannot set properties for columun %s" % col_id)
        
        # Generic tagging
        self.cbtn_generic_tag_active_at_start.set_active(self.config['generic-tag']['active-at-start'])
        self.cbtn_generic_tag_n_of_total.set_active(self.config['generic-tag']['n-of-total'])
        hide_frame_property = self.config['generic-tag']['hide-frame-property']
        if hide_frame_property == 'sensitive':
            self.rbtn_lock_generic_tag_frames.set_active(True)
        elif hide_frame_property == 'visible':
            self.rbtn_hide_generic_tag_frames.set_active(True)
        
        # Music
        self.fcbtn_music_start_path.set_current_folder(self.config['music']['start-folder'])
        self.entry_music_player_program.set_text(self.config['music']['player'])
        
        # Track cover
        self.fcbtn_apic_start_path.set_current_folder(self.config['cover']['start-folder'])
        
    def __update_config(self):
        """ Update the config dictionary with the new settings """
        
        # Mp3 Tree
        self.config['misc']['auto-select-when-added'] = self.cbtn_mp3_tree_select_track_when_added.get_active()
        self.config['misc']['show-notifications'] = self.cbtn_mp3_tree_show_notifications.get_active()
        
        # Each column Id has [visible,background and foreground]
        for col_id in env.COLUMN_IDS:
            try:
                check_button = self.get_widget('cbtn_column_' + col_id)
                background = self.get_widget('colorbtn_background_' + col_id)
                foreground = self.get_widget('colorbtn_foreground_' + col_id)
            
                self.config[col_id]['visible'] = check_button.get_active()
                background_color = background.get_color().to_string()
                foreground_color = foreground.get_color().to_string()
                self.config[col_id]['background'] = background_color
                self.config[col_id]['foreground'] = foreground_color
            except:
                APPLOG.exception("Cannot get properties from columun %s" % col_id)        
        
        # Generic tagging
        self.config['generic-tag']['active-at-start'] = self.cbtn_generic_tag_active_at_start.get_active()
        self.config['generic-tag']['n-of-total'] = self.cbtn_generic_tag_n_of_total.get_active()
        lock_generic_tag_frame = self.rbtn_lock_generic_tag_frames.get_active()
        if lock_generic_tag_frame:
            hide_frame_property = 'sensitive'
        else:
            hide_frame_property = 'visible'
        self.config['generic-tag']['hide-frame-property'] = hide_frame_property
        
        # Music
        self.config['music']['start-folder'] = self.fcbtn_music_start_path.get_current_folder()
        self.config['music']['player'] = self.entry_music_player_program.get_text()
        
        # Track cover
        self.config['cover']['start-folder'] = self.fcbtn_apic_start_path.get_current_folder()
        
                
    ###########################################################################
        
        
    ###########################################################################
    ## Default values Methods       
    def on_btn_default_COLUMNID_clicked(self, btn_default):
        """
        Get the COLUMN_ID from the widget name and use it to reset the
        tag widgets properties
        """
        try:            
            col_id = btn_default.get_name().split('_')[-1]
            APPLOG.info("Reset to default %s column properties" % col_id)
                
            check_button = self.get_widget('cbtn_column_' + col_id)
            background = self.get_widget('colorbtn_background_' + col_id)
            foreground = self.get_widget('colorbtn_foreground_' + col_id)
            
            check_button.set_active(env.DEFAULTS['COLUMNS'][col_id]['visible'])
            background_color = gtk.gdk.color_parse(env.DEFAULTS['COLUMNS'][col_id]['background'])
            foreground_color = gtk.gdk.color_parse(env.DEFAULTS['COLUMNS'][col_id]['foreground'])
            background.set_color(background_color)
            foreground.set_color(foreground_color)                        
        except:
            APPLOG.exception("Cannot set properties for columun %s" % col_id)
 
    def on_btn_default_music_path_clicked (self, btn_default_music_path):
        """ Reset to default the music start folder """
        self.fcbtn_music_start_path.set_current_folder(env.DEFAULTS['MUSIC']['start-folder'])

    def on_btn_default_music_player_program_clicked (self, btn_default_music_player_program):
        """ Reset to default the music player program command """
        self.entry_music_player_program.set_text(env.DEFAULTS['MUSIC']['player'])
        
    def on_btn_default_apic_path_clicked (self, widget, *args):
        """ Reset to default the track cover start folder """
        self.fcbtn_apic_start_path.set_current_folder(env.DEFAULTS['COVER']['start-folder'])        
    ###########################################################################                                                                        


